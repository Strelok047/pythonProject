from io import BytesIO
import ee
import streamlit as st
import geemap.foliumap as geemap
import geopandas as gpd
import matplotlib.pyplot as plt
import zipfile
import tempfile
import os


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
def setup():
    st.set_page_config(layout="wide", page_title="–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", page_icon='üõ∞Ô∏è')
    st.header("üõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


# –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def Navbar():
    with st.sidebar:
        st.page_link('app.py', label='–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', icon='üõ∞Ô∏è')
        st.page_link('pages/graph.py', label='–ì—Ä–∞—Ñ–∏–∫', icon='üìà')
        st.page_link('pages/about.py', label='–û –ø—Ä–æ–µ–∫—Ç–µ', icon='üìñ')


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
datasets = {
    'Sentinel-2': {
        'collection': 'COPERNICUS/S2_SR_HARMONIZED',
        'bands': ['B4', 'B3', 'B2', 'B8', 'B5'],  # bands: 0-–ö—Ä–∞—Å–Ω—ã–π, 1-–°–∏–Ω–∏–π, 2-–ó–µ–ª–µ–Ω—ã–π, 3-NIR, 4-–ö—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        'year_range': [2019, 2023]
    },
    # –î—Ä—É–≥–∏–µ —Å–ø—É—Ç–Ω–∏–∫–∏...
}

# –§–æ—Ä–º—É–ª—ã –∏–Ω–¥–µ–∫—Å–æ–≤ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
indexes = {
    "NDVI": "(NIR - RED) / (NIR + RED)",
    "EVI": "2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))",
    # –î—Ä—É–≥–∏–µ –∏–Ω–¥–µ–∫—Å—ã...
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –æ–±–ª–∞–∫–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
def mask_clouds(image, dataset):
    cloud_mask_band = datasets[dataset]['cloud_mask_band']
    cloud_mask_value = datasets[dataset]['cloud_mask_value']
    cloud_mask = image.select(cloud_mask_band).bitwiseAnd(cloud_mask_value).eq(0)
    return image.updateMask(cloud_mask)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def get_filtered_images(satellite, year, region):
    dataset = datasets[satellite]
    collection = ee.ImageCollection(dataset['collection'])
    filtered_images = collection.filterBounds(region).filterDate(f'{year}-01-01', f'{year}-12-31')

    if satellite == 'Sentinel-2':
        return filtered_images.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20)) \
            .filter(ee.Filter.lt('SNOW_ICE_PERCENTAGE', 20))
    else:
        return filtered_images.map(lambda image: mask_clouds(image, satellite))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RGB-—Å–ª–æ—è –Ω–∞ –∫–∞—Ä—Ç—É
def add_rgb_layer_to_map(m, satellite, year, region, brightness, clip, gamma):
    filtered_images = get_filtered_images(satellite, year, region)
    median_image = filtered_images.median()

    if clip:
        median_image = median_image.clip(region)

    rgb_bands = [datasets[satellite]['bands'][i] for i in range(0, 3)]
    vis_params = {
        'bands': rgb_bands,
        'min': 0,
        'max': int(brightness) * 1000,
        'gamma': gamma
    }
    m.addLayer(median_image, vis_params, f'{satellite} {year} RGB')
    m.centerObject(region, 10)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
def calc_index(satellite, index_name, year, region, clip):
    filtered_images = get_filtered_images(satellite, year, region)
    image = filtered_images.median()

    red_band = datasets[satellite]['bands'][0]
    blue_band = datasets[satellite]['bands'][1]
    green_band = datasets[satellite]['bands'][2]
    nir_band = datasets[satellite]['bands'][3]
    red_edge_band = datasets[satellite]['bands'][4]

    if clip:
        image = image.clip(region)

    index = image.expression(indexes[index_name], {
        'RED': image.select(red_band),
        'BLUE': image.select(blue_band),
        'GREEN': image.select(green_band),
        'NIR': image.select(nir_band),
        'RED_EDGE': image.select(red_edge_band),
        'L': 0.5
    }).rename(index_name)

    stats = index.reduceRegion(
        reducer=ee.Reducer.mean().combine(
            reducer2=ee.Reducer.minMax(), sharedInputs=True
        ).combine(
            reducer2=ee.Reducer.stdDev(), sharedInputs=True
        ),
        geometry=region,
        scale=30,
        bestEffort=True
    ).getInfo()

    return index, stats


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º Streamlit
def main():
    setup()
    Navbar()

    row0_col1, row0_col2, row0_col3, row0_col4, row0_col5 = st.columns([1, 1, 1, 1, 1])
    row1_col1, row1_col2 = st.columns([5, 1])
    row2_col1, row2_col2, row2_col3 = st.columns([1, 1, 1])

    Map = geemap.Map()
    roi = None
    coordinates = None

    # –ü–∞–Ω–µ–ª—å –±–æ–∫–æ–≤–∞—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    st.sidebar.markdown("""---""")
    st.sidebar.markdown("<h5 style='text-align: center; color: grey;'>–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–∞</h5>",
                        unsafe_allow_html=True)
    sidebar_col1, sidebar_col2 = st.sidebar.columns([1, 1])
    with sidebar_col1:
        long = st.number_input('–î–æ–ª–≥–æ—Ç–∞', value=0.0)
    with sidebar_col2:
        lat = st.number_input('–®–∏—Ä–æ—Ç–∞', value=0.0)

    if long != 0 and lat != 0:
        coordinates = ee.Geometry.Point([long, lat])

    st.sidebar.markdown("<h3 style='text-align: center; color: grey;'>–ò–õ–ò</h3>", unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–µ–π–ø-—Ñ–∞–π–ª–∞
    uploaded_shp_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–µ–π–ø-—Ñ–∞–π–ª", type=["zip"])

    if uploaded_shp_file is not None:
        with tempfile.TemporaryDirectory() as tmpdir:
            with zipfile.ZipFile(uploaded_shp_file, 'r') as zip_ref:
                zip_ref.extractall(tmpdir)

            shapefile_path = None
            for root, dirs, files in os.walk(tmpdir):
                for file in files:
                    if file.endswith(".shp"):
                        shapefile_path = os.path.join(root, file)
                        break

            if shapefile_path:
                gdf = gpd.read_file(shapefile_path)
                fig, ax = plt.subplots()
                gdf.plot(ax=ax)
                plt.xticks(rotation=90, fontsize=7)
                plt.yticks(fontsize=7)
                buf = BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                with row2_col1:
                    st.image(buf, caption='Plot Geopandas')
                if not gdf.empty:
                    roi = geemap.geopandas_to_ee(gdf)
            else:
                st.error("–®–µ–π–ø-—Ñ–∞–π–ª (.shp) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ.")

    # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø—É—Ç–Ω–∏–∫–∞, –≥–æ–¥–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    with row0_col1:
        sat = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—É—Ç–Ω–∏–∫", list(datasets.keys()), index=0)

    with row0_col2:
        selected_year = st.number_input("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥", min_value=datasets[sat]['year_range'][0],
                                        max_value=datasets[sat]['year_range'][1],
                                        value=datasets[sat]['year_range'][0])

    with row0_col3:
        brightness = st.number_input("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —è—Ä–∫–æ—Å—Ç—å", value=3)

    with row0_col4:
        gamma = st.number_input("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–∞–º–º—É", value=1.4)

    with row0_col5:
        st.markdown("""""")
        st.markdown("""""")
        clip = st.toggle("–û–±—Ä–µ–∑–∞—Ç—å")

    with row1_col2:
        check_index = st.toggle("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å")
        if check_index:
            index_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å", list(indexes.keys()), index=0)
            main_color = st.color_picker('–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç', value='#00ff00')
            mid_color = st.color_picker('–°—Ä–µ–¥–Ω–∏–π —Ü–≤–µ—Ç', value='#ffff00')
            secondary_color = st.color_picker("–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ü–≤–µ—Ç", value='#ff0000')

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if coordinates is not None and roi is None:
        Map.centerObject(coordinates, zoom=10)
        add_rgb_layer_to_map(Map, sat, selected_year, coordinates, brightness, None, gamma)

    if selected_year is not None and sat is not None and roi is not None:
        Map.centerObject(roi, zoom=10)
        add_rgb_layer_to_map(Map, sat, selected_year, roi, brightness, clip, gamma)

        if check_index:
            index_image, stats = calc_index(sat, index_name, selected_year, roi, clip)
            Map.addLayer(index_image, {'min': -1, 'max': 1, 'palette': [secondary_color, mid_color, main_color]},
                         f'{index_name}, {sat} {selected_year}')
            with row2_col2:
                fig, ax = plt.subplots()
                labels = ['Min', 'Mean', 'Max', 'Std Dev']
                values = [stats[f"{index_name}_min"], stats[f"{index_name}_mean"], stats[f"{index_name}_max"],
                          stats[f"{index_name}_stdDev"]]
                ax.bar(labels, values, color=[main_color, secondary_color, 'blue', 'green'])
                ax.set_title(f'{index_name} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
                ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
                ax.set_xlabel('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
                st.pyplot(fig)
                with row2_col3:
                    st.subheader(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {index_name}")
                    st.write("–ú–∏–Ω:", stats[f"{index_name}_min"])
                    st.write("–°—Ä–µ–¥–Ω–µ–µ:", stats[f"{index_name}_mean"])
                    st.write("–ú–∞–∫—Å:", stats[f"{index_name}_max"])
                    st.write("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:", stats[f"{index_name}_stdDev"])

        if gdf is not None:
            Map.add_gdf(gdf, 'polygon')

    with row1_col1:
        Map.to_streamlit(height=600)


if __name__ == "__main__":
    main()
